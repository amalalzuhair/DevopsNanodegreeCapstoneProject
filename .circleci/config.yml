version: 2.1
parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'
orbs:
  aws-cli: circleci/aws-cli@2.0.3  
  aws-eks: circleci/aws-eks@2.2.0  
  kubernetes: circleci/kubernetes@0.4.0
  
jobs:
  setup-run-lint:
    docker:
      - image: 'python:3.7.3-stretch'
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'v1-dependencies-{{ checksum "requirements.txt" }}'
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: 'v1-dependencies-{{ checksum "requirements.txt" }}'
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
  build-and-push-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build application Docker image
          command: |
            docker login -u amalsz -p dytqak-Qusgu8-faqmuh
            docker build -t capstone-project-blue-env .
            dockerpath="amalsz/capstone-project-blue-env:v1.0.0"
            docker tag capstone-project-blue-env ${dockerpath}
            docker push ${dockerpath}
      - run:
          name: Build application Docker image
          command: |
            docker login -u amalsz -p dytqak-Qusgu8-faqmuh
            docker build -t capstone-project-green-env .
            dockerpath="amalsz/capstone-project-green-env:v1.0.0"
            docker tag capstone-project-green-env ${dockerpath}
            docker push ${dockerpath}
  create-the-cluster:
      docker:
        - image: circleci/node:13.8.0
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - run:
            name: Install the eksctl tool
            command: |
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              sudo mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
              
        - aws-eks/create-cluster:
            cluster-name: << parameters.cluster-name >>
            zones: us-east-1a,us-east-1b
  test-cluster:
      docker:
        - image: circleci/node:13.8.0
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - kubernetes/install:
            kubectl-version: v1.25.0
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
        - kubernetes/create-or-update-resource:
            resource-file-path: ./service.json
            resource-name: service/loadbalancerv1
        - run:
            name: Deploy blue application in cluster
            command: |
              kubectl cluster-info
              kubectl apply -f ./service.json
        - run:
            name: Confirm blue application is in cluster
            command: |
              sleep 60 && kubectl get all && sleep 60
        - run:
            name: Deploy green application in cluster
            command: |
              kubectl apply -f ./service.json
        - run:
            name: Confirm green application is in cluster
            command: |
              sleep 60 && kubectl get all && sleep 60
  delete-cluster: 
      docker:
        - image: circleci/node:13.8.0
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - run:
            name: Install the eksctl tool
            command: |
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              sudo mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
        - aws-eks/delete-cluster:
            cluster-name: << parameters.cluster-name >>

workflows:
  default:
    jobs:
      - setup-run-lint
      - build-and-push-docker-image:
         requires:
            - setup-run-lint
      #- create-the-cluster:
      #   cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID:0:7}
      #   requires:
      #      - build-and-push-docker-image
      - test-cluster:
         cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID:0:7}
      #   requires:
      #      - create-the-cluster
      #- delete-cluster: 
      #   cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID:0:7}
      #   requires: 
      #      - test-cluster